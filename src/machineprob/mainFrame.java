/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package machineprob;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.event.*;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
/**
 *
 * @author Lance
 */
public class mainFrame extends javax.swing.JFrame {
    // Constants for different property types' land assessment rates
    private static final double RESIDENTIAL_LAND_RATE = 0.20;
    private static final double AGRICULTURAL_LAND_RATE = 0.40;
    private static final double COMMERCIAL_LAND_RATE = 0.50;
    
    // Constants for RPT rates
    private static final double METRO_MANILA_RATE = 0.02;
    private static final double PROVINCE_RATE = 0.01;

    // Table model for displaying calculation history
    private DefaultTableModel tableModel;

    // Database connection object
    private Database db;

    private long lastCalculationTime = 0;

    // Track which text field currently has focus
    private JTextField currentFocusedField = null;

    public mainFrame() {
        initComponents();
        setupComponents();
        initializeDatabase();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        HeaderPanel = new javax.swing.JPanel();
        TitleLabel = new javax.swing.JLabel();
        CloseFrameButton = new javax.swing.JButton();
        MinimizeFrameButton = new javax.swing.JButton();
        PropertyTypeLabel = new javax.swing.JLabel();
        PropertyTypeComboBox = new javax.swing.JComboBox<>();
        LocationLabel = new javax.swing.JLabel();
        LocationComboBox = new javax.swing.JComboBox<>();
        LandFMVLabel = new javax.swing.JLabel();
        ImprovementFMVLabel = new javax.swing.JLabel();
        LandFMVTextField = new javax.swing.JTextField();
        ImprovementFMVTextField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        CalculateButton = new javax.swing.JButton();
        ClearButton = new javax.swing.JButton();
        SearchTextField = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        Button1 = new javax.swing.JButton();
        Button2 = new javax.swing.JButton();
        Button3 = new javax.swing.JButton();
        Button4 = new javax.swing.JButton();
        Button5 = new javax.swing.JButton();
        Button6 = new javax.swing.JButton();
        Button7 = new javax.swing.JButton();
        Button8 = new javax.swing.JButton();
        Button9 = new javax.swing.JButton();
        ButtonDot = new javax.swing.JButton();
        Button0 = new javax.swing.JButton();
        ButtonEnter = new javax.swing.JButton();
        ClearHistory = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAlwaysOnTop(true);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setUndecorated(true);

        HeaderPanel.setBackground(new java.awt.Color(102, 102, 102));

        TitleLabel.setFont(new java.awt.Font("Urbanist", 1, 18)); // NOI18N
        TitleLabel.setForeground(new java.awt.Color(255, 255, 255));
        TitleLabel.setText("Property Tax Calculator");

        CloseFrameButton.setBackground(new java.awt.Color(255, 0, 51));
        CloseFrameButton.setText("X");
        CloseFrameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CloseFrameButtonActionPerformed(evt);
            }
        });

        MinimizeFrameButton.setBackground(new java.awt.Color(255, 255, 153));
        MinimizeFrameButton.setText("-");
        MinimizeFrameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MinimizeFrameButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout HeaderPanelLayout = new javax.swing.GroupLayout(HeaderPanel);
        HeaderPanel.setLayout(HeaderPanelLayout);
        HeaderPanelLayout.setHorizontalGroup(
            HeaderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HeaderPanelLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(TitleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(MinimizeFrameButton, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CloseFrameButton, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        HeaderPanelLayout.setVerticalGroup(
            HeaderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HeaderPanelLayout.createSequentialGroup()
                .addGroup(HeaderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CloseFrameButton)
                    .addComponent(MinimizeFrameButton))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(HeaderPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(TitleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        PropertyTypeLabel.setText("Property Type:");

        PropertyTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        LocationLabel.setText("Location:");

        LocationComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        LandFMVLabel.setText("Land FMV:");

        ImprovementFMVLabel.setText("Improvement FMV:");

        LandFMVTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LandFMVTextFieldActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        CalculateButton.setBackground(new java.awt.Color(153, 255, 153));
        CalculateButton.setText("Calculate");
        CalculateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CalculateButtonActionPerformed(evt);
            }
        });

        ClearButton.setBackground(new java.awt.Color(255, 51, 51));
        ClearButton.setText("Clear");
        ClearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearButtonActionPerformed(evt);
            }
        });

        jPanel1.setLayout(new java.awt.GridLayout(4, 4, 5, 5));

        Button1.setText("1");
        Button1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button1ActionPerformed(evt);
            }
        });
        jPanel1.add(Button1);

        Button2.setText("2");
        Button2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button2ActionPerformed(evt);
            }
        });
        jPanel1.add(Button2);

        Button3.setText("3");
        Button3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button3ActionPerformed(evt);
            }
        });
        jPanel1.add(Button3);

        Button4.setText("4");
        Button4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button4ActionPerformed(evt);
            }
        });
        jPanel1.add(Button4);

        Button5.setText("5");
        Button5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button5ActionPerformed(evt);
            }
        });
        jPanel1.add(Button5);

        Button6.setText("6");
        Button6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button6ActionPerformed(evt);
            }
        });
        jPanel1.add(Button6);

        Button7.setText("7");
        Button7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button7ActionPerformed(evt);
            }
        });
        jPanel1.add(Button7);

        Button8.setText("8");
        Button8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button8ActionPerformed(evt);
            }
        });
        jPanel1.add(Button8);

        Button9.setText("9");
        Button9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button9ActionPerformed(evt);
            }
        });
        jPanel1.add(Button9);

        ButtonDot.setText(".");
        ButtonDot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonDotActionPerformed(evt);
            }
        });
        jPanel1.add(ButtonDot);

        Button0.setText("0");
        Button0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button0ActionPerformed(evt);
            }
        });
        jPanel1.add(Button0);

        ButtonEnter.setBackground(new java.awt.Color(153, 255, 153));
        ButtonEnter.setText("Enter");
        ButtonEnter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonEnterActionPerformed(evt);
            }
        });
        jPanel1.add(ButtonEnter);

        ClearHistory.setBackground(new java.awt.Color(255, 51, 51));
        ClearHistory.setText("Clear History");
        ClearHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearHistoryActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(HeaderPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ImprovementFMVLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ImprovementFMVTextField)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(CalculateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 355, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ClearButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(PropertyTypeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(LocationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(LandFMVLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(40, 40, 40)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(LocationComboBox, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(LandFMVTextField)
                            .addComponent(PropertyTypeComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 866, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 472, Short.MAX_VALUE)
                    .addComponent(SearchTextField)
                    .addComponent(ClearHistory, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(HeaderPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(SearchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(PropertyTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(PropertyTypeLabel)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(LocationComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(LocationLabel))
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(LandFMVLabel)
                            .addComponent(LandFMVTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ImprovementFMVLabel)
                            .addComponent(ImprovementFMVTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(CalculateButton)
                            .addComponent(ClearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 485, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ClearHistory, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    // db
    private void initializeDatabase() {
        try {
            db = new Database();
            db.loadRecords(tableModel);
        } catch (Exception e) {
            e.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this,
                "Error connecting to database: " + e.getMessage() + "\n" +
                "Please make sure MySQL is running and try again.",
                "Database Error",
                javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }


    private void MinimizeFrameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MinimizeFrameButtonActionPerformed
       this.setState(java.awt.Frame.ICONIFIED);
    }//GEN-LAST:event_MinimizeFrameButtonActionPerformed

    private void CloseFrameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CloseFrameButtonActionPerformed
       closeApplication();
    }//GEN-LAST:event_CloseFrameButtonActionPerformed

    private void ClearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearButtonActionPerformed
        clearAll();
    }//GEN-LAST:event_ClearButtonActionPerformed

    private void ButtonEnterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonEnterActionPerformed
        CalculateButtonActionPerformed(evt);
    }//GEN-LAST:event_ButtonEnterActionPerformed

    private void Button1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button1ActionPerformed
        appendNumber("1");
    }//GEN-LAST:event_Button1ActionPerformed

    private void Button2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button2ActionPerformed
        appendNumber("2");
    }//GEN-LAST:event_Button2ActionPerformed

    private void Button3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button3ActionPerformed
        appendNumber("3");
    }//GEN-LAST:event_Button3ActionPerformed

    private void Button4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button4ActionPerformed
        appendNumber("4");
    }//GEN-LAST:event_Button4ActionPerformed

    private void Button5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button5ActionPerformed
        appendNumber("5");
    }//GEN-LAST:event_Button5ActionPerformed

    private void Button6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button6ActionPerformed
        appendNumber("6");
    }//GEN-LAST:event_Button6ActionPerformed

    private void Button7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button7ActionPerformed
        appendNumber("7");
    }//GEN-LAST:event_Button7ActionPerformed

    private void Button8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button8ActionPerformed
        appendNumber("8");
    }//GEN-LAST:event_Button8ActionPerformed

    private void Button9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button9ActionPerformed
        appendNumber("9");
    }//GEN-LAST:event_Button9ActionPerformed

    private void ButtonDotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonDotActionPerformed
        appendNumber(".");
    }//GEN-LAST:event_ButtonDotActionPerformed

    private void Button0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button0ActionPerformed
        appendNumber("0");
    }//GEN-LAST:event_Button0ActionPerformed

    private void LandFMVTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LandFMVTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_LandFMVTextFieldActionPerformed

    private void ClearHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearHistoryActionPerformed
        int selectedRow = jTable1.getSelectedRow();
        
        if (selectedRow >= 0) {
            // Delete selected record
            int confirm = javax.swing.JOptionPane.showConfirmDialog(this,
                "Are you sure you want to delete the selected record?",
                "Delete Record Confirmation",
                javax.swing.JOptionPane.YES_NO_OPTION,
                javax.swing.JOptionPane.WARNING_MESSAGE);
                
            if (confirm == javax.swing.JOptionPane.YES_OPTION) {
                try {
                    // Get the values from the selected row
                    String propertyType = String.valueOf(jTable1.getModel().getValueAt(selectedRow, 0));
                    String location = String.valueOf(jTable1.getModel().getValueAt(selectedRow, 1));
                    double landFMV = Double.parseDouble(String.valueOf(jTable1.getModel().getValueAt(selectedRow, 2)));
                    double improvementFMV = Double.parseDouble(String.valueOf(jTable1.getModel().getValueAt(selectedRow, 3)));
                    double totalRPT = Double.parseDouble(String.valueOf(jTable1.getModel().getValueAt(selectedRow, 4)));
                    
                    // Delete the record from database
                    db.deleteRecord(propertyType, location, landFMV, improvementFMV, totalRPT);
                    
                    // Refresh the table
                    db.loadRecords(tableModel);
                    
                    javax.swing.JOptionPane.showMessageDialog(this,
                        "Selected record deleted successfully.",
                        "Success",
                        javax.swing.JOptionPane.INFORMATION_MESSAGE);
                } catch (Exception e) {
                    e.printStackTrace();
                    javax.swing.JOptionPane.showMessageDialog(this,
                        "Error deleting record: " + e.getMessage(),
                        "Database Error",
                        javax.swing.JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            // Clear all records
            int confirm = javax.swing.JOptionPane.showConfirmDialog(this,
                "Are you sure you want to clear all history?\nThis action cannot be undone.",
                "Clear History Confirmation",
                javax.swing.JOptionPane.YES_NO_OPTION,
                javax.swing.JOptionPane.WARNING_MESSAGE);
                
            if (confirm == javax.swing.JOptionPane.YES_OPTION) {
                try {
                    db.clearAllRecords();
                    tableModel.setRowCount(0);  // Clear the table model
                    javax.swing.JOptionPane.showMessageDialog(this,
                        "History cleared successfully.",
                        "Success",
                        javax.swing.JOptionPane.INFORMATION_MESSAGE);
                } catch (Exception e) {
                    e.printStackTrace();
                    javax.swing.JOptionPane.showMessageDialog(this,
                        "Error clearing history: " + e.getMessage(),
                        "Database Error",
                        javax.swing.JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_ClearHistoryActionPerformed

    private void CalculateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CalculateButtonActionPerformed
        compute();
        clearAll();
    }//GEN-LAST:event_CalculateButtonActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        int row = jTable1.getSelectedRow();
        
        if (row >= 0) {
            String propertyType = String.valueOf(jTable1.getModel().getValueAt(row, 0));
            String location = String.valueOf(jTable1.getModel().getValueAt(row, 1));
            String landFMV = String.valueOf(jTable1.getModel().getValueAt(row, 2));
            String improvementFMV = String.valueOf(jTable1.getModel().getValueAt(row, 3));
            
            // Set the values in the form fields
            PropertyTypeComboBox.setSelectedItem(propertyType);
            LocationComboBox.setSelectedItem(location);
            LandFMVTextField.setText(landFMV);
            ImprovementFMVTextField.setText(improvementFMV);
            
            // Set focus to the Land FMV field
            LandFMVTextField.requestFocus();
        }
    }//GEN-LAST:event_jTable1MouseClicked

    //comp
    private void setupComponents() {
        String[] propertyTypes = {"Residential", "Agricultural", "Commercial"};
        PropertyTypeComboBox.setModel(new DefaultComboBoxModel<>(propertyTypes));
        
        String[] locations = {"Metro Manila", "Province"};
        LocationComboBox.setModel(new DefaultComboBoxModel<>(locations));
        
        String[] columnNames = {"Property Type", "Location", "Land FMV", "Improvement FMV", "Total RPT"};
        tableModel = new DefaultTableModel(columnNames, 0);
        jTable1.setModel(tableModel);
        
        SearchTextField.getDocument().addDocumentListener(new javax.swing.event.DocumentListener() {
            @Override
            public void insertUpdate(javax.swing.event.DocumentEvent e) {
                search(SearchTextField.getText());
            }

            @Override
            public void removeUpdate(javax.swing.event.DocumentEvent e) {
                search(SearchTextField.getText());
            }

            @Override
            public void changedUpdate(javax.swing.event.DocumentEvent e) {
                search(SearchTextField.getText());
            }
        });
        
        //focus tracking for tf
        LandFMVTextField.addFocusListener(new FocusAdapter() {
            @Override
            public void focusGained(FocusEvent evt) {
                currentFocusedField = LandFMVTextField;
            }
        });
        
        ImprovementFMVTextField.addFocusListener(new FocusAdapter() {
            @Override
            public void focusGained(FocusEvent evt) {
                currentFocusedField = ImprovementFMVTextField;
            }
        });
        
        // Set up keyboard shortcuts
        setupGlobalKeyboardShortcuts();
        this.setFocusable(true);
    }
    
    // Handle number pad input
    private void appendNumber(String number) {
        JTextField targetField = currentFocusedField;
        if (targetField == null) {
            targetField = LandFMVTextField;
            targetField.requestFocus();
        }
        
        // Prevent multiple decimal points
        if (number.equals(".") && targetField.getText().contains(".")) {
            return;
        }
        targetField.setText(targetField.getText() + number);
    }

    // Calculate assessment level for improvements based on property type and FMV
    private double getImprovementAssessmentLevel(String propertyType, double fmv) {
        // Residential property assessment levels
        if (propertyType.equals("Residential")) {
            if (fmv <= 175000) {
                return 0.0;
            }
            if (fmv <= 300000) {
                return 0.10;
            }
            if (fmv <= 500000) {
                return 0.20;
            }
            return 0.20;
        }
        
        // Agricultural property assessment levels
        if (propertyType.equals("Agricultural")) {
            if (fmv <= 300000) {
                return 0.25;
            }
            if (fmv <= 500000) {
                return 0.30;
            }
            if (fmv <= 750000) {
                return 0.35;
            }
            return 0.35;
        }
        
        // Commercial property assessment levels
        if (propertyType.equals("Commercial")) {
            if (fmv <= 300000) {
                return 0.30;
            }
            if (fmv <= 500000) {
                return 0.35;
            }
            if (fmv <= 750000) {
                return 0.40;
            }
            return 0.40;
        }
        
        return 0.0;
    }
    
    // Get land assessment rate based on property type
    private double getLandAssessmentLevel(String propertyType) {
        if (propertyType.equals("Residential")) {
            return RESIDENTIAL_LAND_RATE;
        }
        if (propertyType.equals("Agricultural")) {
            return AGRICULTURAL_LAND_RATE;
        }
        if (propertyType.equals("Commercial")) {
            return COMMERCIAL_LAND_RATE;
        }
        return 0.0;
    }
    
    // Get RPT rate based on location
    private double getRPTRate(String location) {
        if (location.equals("Metro Manila")) {
            return METRO_MANILA_RATE;
        }
        return PROVINCE_RATE;
    }
    
    // Main calculation method
    private void compute() {
        // Validate inputs before calculation
        if (!validateInputs()) {
            return;
        }

        try {
            // Get input values from form
            String propertyType = PropertyTypeComboBox.getSelectedItem().toString();
            String location = LocationComboBox.getSelectedItem().toString();
            double landFMV = Double.parseDouble(LandFMVTextField.getText().trim());
            double improvementFMV = Double.parseDouble(ImprovementFMVTextField.getText().trim());

            // Validate for negative values
            if (landFMV < 0 || improvementFMV < 0) {
                javax.swing.JOptionPane.showMessageDialog(this,
                    "FMV values cannot be negative.",
                    "Input Error",
                    javax.swing.JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            // Step 1: Calculate land assessment
            double landAssessmentLevel = getLandAssessmentLevel(propertyType);
            double landAssessedValue = landFMV * landAssessmentLevel;
            
            // Step 2: Calculate improvement assessment
            double improvementAssessmentLevel = getImprovementAssessmentLevel(propertyType, improvementFMV);
            double improvementAssessedValue = improvementFMV * improvementAssessmentLevel;
            
            // Step 3: Calculate total assessed value
            double totalAssessedValue = landAssessedValue + improvementAssessedValue;
            
            // Step 4: Get RPT rate based on location
            double rptRate = getRPTRate(location);
            
            // Step 5: Calculate final RPT
            double totalRPT = totalAssessedValue * rptRate;
            
            // Record calculation time
            lastCalculationTime = System.currentTimeMillis();
            
            // Save calculation to database
            try {
                db.addRecord(propertyType, location, landFMV, improvementFMV, totalRPT);
                db.loadRecords(tableModel);
            } catch (Exception e) {
                e.printStackTrace();
                javax.swing.JOptionPane.showMessageDialog(this,
                    "Error saving to database: " + e.getMessage(),
                    "Database Error",
                    javax.swing.JOptionPane.ERROR_MESSAGE);
            }
            
            // Display result
            javax.swing.JOptionPane.showMessageDialog(this,
                String.format("Total RPT: %.2f", totalRPT),
                "Calculation Result",
                javax.swing.JOptionPane.INFORMATION_MESSAGE);
                
        } catch (Exception e) {
            e.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this,
                "Error in calculation: " + e.getMessage(),
                "Calculation Error",
                javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }
    
    // Validate input fields
    private boolean validateInputs() {
        // Check for empty fields
        if (LandFMVTextField.getText().trim().isEmpty() || 
            ImprovementFMVTextField.getText().trim().isEmpty()) {
            javax.swing.JOptionPane.showMessageDialog(this,
                "Please fill in all FMV values.",
                "Input Error",
                javax.swing.JOptionPane.ERROR_MESSAGE);
            return false;
        }
        
        // Validate numeric input
        try {
            Double.parseDouble(LandFMVTextField.getText());
            Double.parseDouble(ImprovementFMVTextField.getText());
        } catch (NumberFormatException e) {
            javax.swing.JOptionPane.showMessageDialog(this,
                "Please enter valid numeric values for FMV fields.",
                "Input Error",
                javax.swing.JOptionPane.ERROR_MESSAGE);
            return false;
        }
        
        return true;
    }
    
    // Clear all input fields and reset form
    private void clearAll() {
        javax.swing.JTextField[] textFields = {
            LandFMVTextField, ImprovementFMVTextField, SearchTextField
        };
        for (int i = 0; i < textFields.length; i++) {
            textFields[i].setText("");
        }
        
        PropertyTypeComboBox.setSelectedIndex(0);
        LocationComboBox.setSelectedIndex(0);
        
        db.loadRecords(tableModel);
    }
    
    // Search functionality for history table
    private void search(String text) {
        if (text.trim().length() == 0) {
            db.loadRecords(tableModel);
        } else {
            db.searchRecords(tableModel, text);
        }
    }
      //source:https://forums.oracle.com/ords/apexds/post/keylistener-and-inputmap-confusion-9362
    private void setupGlobalKeyboardShortcuts() {
        javax.swing.InputMap inputMap = getRootPane().getInputMap(javax.swing.JComponent.WHEN_IN_FOCUSED_WINDOW);
        javax.swing.ActionMap actionMap = getRootPane().getActionMap();
        
        inputMap.put(javax.swing.KeyStroke.getKeyStroke('X', 0), "exit");
        inputMap.put(javax.swing.KeyStroke.getKeyStroke('x', 0), "exit");
        actionMap.put("exit", new javax.swing.AbstractAction() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent e) {
                closeApplication();
            }
        });
    }

    // Handle application exit
    private void closeApplication() {
        int confirm = javax.swing.JOptionPane.showConfirmDialog(this,
            "Are you sure you want to exit?",
            "Exit Confirmation",
            javax.swing.JOptionPane.YES_NO_OPTION);
            
        if (confirm == javax.swing.JOptionPane.YES_OPTION) {
            dispose();
        }
    }

    // Handle window events
    @Override
    protected void processWindowEvent(WindowEvent e) {
        if (e.getID() == WindowEvent.WINDOW_CLOSING) {
            closeApplication();
        } else {
            super.processWindowEvent(e);
        }
    }


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Metal".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new mainFrame().setVisible(true);
            }
        });
    }

   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Button0;
    private javax.swing.JButton Button1;
    private javax.swing.JButton Button2;
    private javax.swing.JButton Button3;
    private javax.swing.JButton Button4;
    private javax.swing.JButton Button5;
    private javax.swing.JButton Button6;
    private javax.swing.JButton Button7;
    private javax.swing.JButton Button8;
    private javax.swing.JButton Button9;
    private javax.swing.JButton ButtonDot;
    private javax.swing.JButton ButtonEnter;
    private javax.swing.JButton CalculateButton;
    private javax.swing.JButton ClearButton;
    private javax.swing.JButton ClearHistory;
    private javax.swing.JButton CloseFrameButton;
    private javax.swing.JPanel HeaderPanel;
    private javax.swing.JLabel ImprovementFMVLabel;
    private javax.swing.JTextField ImprovementFMVTextField;
    private javax.swing.JLabel LandFMVLabel;
    private javax.swing.JTextField LandFMVTextField;
    private javax.swing.JComboBox<String> LocationComboBox;
    private javax.swing.JLabel LocationLabel;
    private javax.swing.JButton MinimizeFrameButton;
    private javax.swing.JComboBox<String> PropertyTypeComboBox;
    private javax.swing.JLabel PropertyTypeLabel;
    private javax.swing.JTextField SearchTextField;
    private javax.swing.JLabel TitleLabel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

}
